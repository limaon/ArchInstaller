from flask import Flask, render_template, request, jsonify, send_file
import os
import json
import markdown2
from pygments.formatters import HtmlFormatter

app = Flask(__name__)

BASE_DIR = os.path.dirname(os.path.abspath(__file__))
DOCS_DIR = os.path.join(BASE_DIR, 'docs')
PACKAGES_DIR = os.path.join(BASE_DIR, 'packages')
CONFIGS_DIR = os.path.join(BASE_DIR, 'configs')

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/docs')
def docs():
    doc_files = []
    if os.path.exists(DOCS_DIR):
        for filename in sorted(os.listdir(DOCS_DIR)):
            if filename.endswith('.md'):
                doc_files.append(filename)
    return render_template('docs.html', doc_files=doc_files)

@app.route('/docs/<filename>')
def view_doc(filename):
    if not filename.endswith('.md'):
        filename += '.md'
    
    filepath = os.path.join(DOCS_DIR, filename)
    if not os.path.exists(filepath):
        return "Document not found", 404
    
    with open(filepath, 'r', encoding='utf-8') as f:
        content = f.read()
    
    html_content = markdown2.markdown(
        content,
        extras=['fenced-code-blocks', 'tables', 'header-ids', 'code-friendly']
    )
    
    return render_template('doc_view.html', content=html_content, filename=filename)

@app.route('/config')
def config():
    packages = {}
    
    de_dir = os.path.join(PACKAGES_DIR, 'desktop-environments')
    if os.path.exists(de_dir):
        packages['desktop_environments'] = []
        for filename in sorted(os.listdir(de_dir)):
            if filename.endswith('.json'):
                with open(os.path.join(de_dir, filename), 'r') as f:
                    data = json.load(f)
                    packages['desktop_environments'].append({
                        'id': filename.replace('.json', ''),
                        'name': filename.replace('.json', '').upper(),
                        'packages': data
                    })
    
    optional_dir = os.path.join(PACKAGES_DIR, 'optional')
    if os.path.exists(optional_dir):
        packages['optional'] = []
        for filename in sorted(os.listdir(optional_dir)):
            if filename.endswith('.json'):
                with open(os.path.join(optional_dir, filename), 'r') as f:
                    data = json.load(f)
                    packages['optional'].append({
                        'id': filename.replace('.json', ''),
                        'name': filename.replace('.json', '').title(),
                        'packages': data
                    })
    
    return render_template('config.html', packages=packages)

@app.route('/generate-config', methods=['POST'])
def generate_config():
    data = request.json
    
    if not data:
        return jsonify({'error': 'No data provided'}), 400
    
    config_content = "# Arch Linux Installation Configuration\n"
    config_content += "# Generated by ArchInstaller Web Assistant\n\n"
    
    if data.get('username'):
        config_content += f"USERNAME={data['username']}\n"
    if data.get('hostname'):
        config_content += f"HOSTNAME={data['hostname']}\n"
    if data.get('timezone'):
        config_content += f"TIMEZONE={data['timezone']}\n"
    if data.get('keymap'):
        config_content += f"KEYMAP={data['keymap']}\n"
    if data.get('desktop_environment'):
        config_content += f"DESKTOP_ENV={data['desktop_environment']}\n"
    if data.get('aur_helper'):
        config_content += f"AUR_HELPER={data['aur_helper']}\n"
    if data.get('install_type'):
        config_content += f"INSTALL_TYPE={data['install_type']}\n"
    
    return jsonify({'config': config_content})

@app.route('/readme')
def readme():
    readme_path = os.path.join(BASE_DIR, 'README.md')
    if os.path.exists(readme_path):
        with open(readme_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        html_content = markdown2.markdown(
            content,
            extras=['fenced-code-blocks', 'tables', 'header-ids', 'code-friendly']
        )
        
        return render_template('doc_view.html', content=html_content, filename='README.md')
    
    return "README not found", 404

@app.route('/pygments.css')
def pygments_css():
    formatter = HtmlFormatter(style='monokai')
    return formatter.get_style_defs('.codehilite'), 200, {'Content-Type': 'text/css'}

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=True)
